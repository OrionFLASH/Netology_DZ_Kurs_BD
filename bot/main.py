import logging
import sys
from dataclasses import dataclass
from typing import Dict, Optional

import telebot
from telebot import types

from config import TELEGRAM_BOT_TOKEN
import db
from keyboards import main_menu, options_keyboard, cancel_keyboard, statistics_menu, statistics_during_game_menu

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s %(message)s')
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, parse_mode='HTML')


@dataclass
class UserState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º"""
    mode: Optional[str] = None  # 'quiz' | 'add' | 'delete'
    pending_correct_en: Optional[str] = None


# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states: Dict[int, UserState] = {}


def get_state(chat_id: int) -> UserState:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id not in user_states:
        user_states[chat_id] = UserState()
    return user_states[chat_id]


def format_statistics(stats: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üéØ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: <b>{stats['total_attempts']}</b>\n"
        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{stats['correct_attempts']}</b>\n"
        f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{stats['incorrect_attempts']}</b>\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: <b>{stats['success_rate']}%</b>\n"
        f"üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: <b>{stats['current_streak']}</b>\n"
        f"üèÜ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: <b>{stats['best_streak']}</b>\n"
        f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{stats['last_activity'].strftime('%d.%m.%Y %H:%M')}</b>"
    )


@bot.message_handler(commands=['start'])
def handle_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω id=%s tg_id=%s", user_id, message.from_user.id)
    
    welcome = (
        "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï, —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n\n"
        "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–π —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
        "–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è"
    )
    bot.send_message(message.chat.id, welcome, reply_markup=main_menu())


@bot.message_handler(commands=['help'])
def handle_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º"""
    help_text = (
        f"üìñ <b>–°–ü–†–ê–í–ö–ê –ü–û –ë–û–¢–£ EnglishCard</b>\n\n"
        f"üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        f"‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        f"üéÆ <b>–§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:</b>\n\n"
        f"üìö <b>–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</b>\n"
        f"   –ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.\n"
        f"   –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏–∑ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.\n"
        f"   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π.\n\n"
        f"‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ</b>\n"
        f"   –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Å–ª–æ–≤–∞ –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.\n"
        f"   –§–æ—Ä–º–∞—Ç: –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ_—Å–ª–æ–≤–æ - —Ä—É—Å—Å–∫–∏–π_–ø–µ—Ä–µ–≤–æ–¥\n"
        f"   –ü—Ä–∏–º–µ—Ä: house - –¥–æ–º\n\n"
        f"üóë <b>–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ</b>\n"
        f"   –£–¥–∞–ª–∏—Ç–µ —Å–ª–æ–≤–∞ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è.\n"
        f"   –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"   –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è:\n"
        f"   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫\n"
        f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        f"   ‚Ä¢ –¢–µ–∫—É—â–∞—è –∏ –ª—É—á—à–∞—è —Å–µ—Ä–∏–∏\n"
        f"   ‚Ä¢ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
        f"üéÆ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã:</b>\n"
        f"‚Ä¢ ‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        f"‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        f"‚Ä¢ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é\n"
        f"‚Ä¢ ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
        f"üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</b>\n"
        f"‚Ä¢ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–¥–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"‚Ä¢ –°–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ, –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º\n"
        f"‚Ä¢ –ë–æ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞—à—É —Å–µ—Ä–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        f"‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —É–ª—É—á—à–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
        f"üÜò <b>–ü—Ä–æ–±–ª–µ–º—ã?</b>\n"
        f"–ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
        f"1. –û—Ç–ø—Ä–∞–≤–∏—Ç—å /start\n"
        f"2. –ù–∞–∂–∞—Ç—å üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n"
        f"–£–¥–∞—á–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è! üöÄ"
    )
    
    bot.send_message(message.chat.id, help_text, reply_markup=main_menu())


@bot.message_handler(func=lambda m: m.text == '–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
def handle_start_training(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'"""
    state = get_state(message.chat.id)
    state.mode = 'quiz'
    ask_question(message)


@bot.message_handler(func=lambda m: m.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def handle_statistics(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é"""
    state = get_state(message.chat.id)
    user_db_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    stats = db.get_user_statistics(user_db_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –∏–≥—Ä—ã
    is_during_game = state.mode == 'quiz' and state.pending_correct_en is not None
    
    if stats and stats['total_attempts'] > 0:
        if is_during_game:
            # –í–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            bot.send_message(message.chat.id, format_statistics(stats), reply_markup=statistics_during_game_menu())
        else:
            # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            bot.send_message(message.chat.id, format_statistics(stats), reply_markup=statistics_menu())
    else:
        if is_during_game:
            bot.send_message(
                message.chat.id, 
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!",
                reply_markup=statistics_during_game_menu()
            )
        else:
            bot.send_message(
                message.chat.id, 
                "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!",
                reply_markup=statistics_menu()
            )


@bot.message_handler(func=lambda m: m.text == 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É')
def handle_reset_statistics(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'"""
    user_db_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    db.reset_user_statistics(user_db_id)
    bot.send_message(
        message.chat.id, 
        "üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=main_menu()
    )


@bot.message_handler(func=lambda m: m.text == 'üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
def handle_detailed_statistics(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    user_db_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    stats = db.get_user_statistics(user_db_id)
    
    if stats and stats['total_attempts'] > 0:
        detailed_stats = (
            f"üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üéØ <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {stats['total_attempts']}\n"
            f"   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {stats['correct_attempts']}\n"
            f"   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {stats['incorrect_attempts']}\n\n"
            f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']}%\n"
            f"   ‚Ä¢ –û—à–∏–±–∫–∏: {100 - stats['success_rate']:.1f}%\n\n"
            f"üî• <b>–°–µ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤:</b>\n"
            f"   ‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {stats['current_streak']}\n"
            f"   ‚Ä¢ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: {stats['best_streak']}\n\n"
            f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['last_activity'].strftime('%d.%m.%Y –≤ %H:%M')}"
        )
        bot.send_message(message.chat.id, detailed_stats, reply_markup=statistics_menu())
    else:
        bot.send_message(
            message.chat.id, 
            "üìà –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=statistics_menu()
        )


@bot.message_handler(func=lambda m: m.text == '‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É')
def handle_stop_game(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É'"""
    state = get_state(message.chat.id)
    state.mode = None
    state.pending_correct_en = None
    
    user_db_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    stats = db.get_user_statistics(user_db_id)
    
    if stats and stats['total_attempts'] > 0:
        session_stats = (
            f"‚èπ <b>–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:</b>\n"
            f"   ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['correct_attempts']}\n"
            f"   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['incorrect_attempts']}\n"
            f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats['success_rate']}%\n"
            f"   ‚Ä¢ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: {stats['best_streak']}\n\n"
            f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ"
        )
        bot.send_message(message.chat.id, session_stats, reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "‚èπ –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=main_menu())





@bot.message_handler(func=lambda m: m.text == '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É')
def handle_continue_game(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É'"""
    state = get_state(message.chat.id)
    if state.mode == 'quiz':
        ask_question(message)
    else:
        bot.send_message(message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@bot.message_handler(func=lambda m: m.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
def handle_main_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    state = get_state(message.chat.id)
    state.mode = None
    state.pending_correct_en = None
    bot.send_message(message.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


def ask_question(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_db_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    picked = db.pick_question_with_options(user_db_id)
    
    if not picked:
        bot.send_message(
            message.chat.id,
            '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë —Å–ª–æ–≤–∞ (–º–∏–Ω–∏–º—É–º 4 –≤ —Å—É–º–º–µ).',
            reply_markup=main_menu(),
        )
        return
    
    word_ru, correct_en, options = picked
    state = get_state(message.chat.id)
    state.pending_correct_en = correct_en
    
    bot.send_message(
        message.chat.id,
        f'–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: <b>{word_ru}</b>?',
        reply_markup=options_keyboard(options),
    )


@bot.message_handler(func=lambda m: m.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï')
def handle_add_word(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'"""
    state = get_state(message.chat.id)
    state.mode = 'add'
    bot.send_message(
        message.chat.id,
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ - —Ä—É—Å—Å–∫–∏–π</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>cat - –∫–æ—Ç</i>)',
        reply_markup=cancel_keyboard(),
    )


@bot.message_handler(func=lambda m: m.text == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô')
def handle_delete_word(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ'"""
    state = get_state(message.chat.id)
    state.mode = 'delete'
    bot.send_message(
        message.chat.id,
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ</b> —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã',
        reply_markup=cancel_keyboard(),
    )


@bot.message_handler(func=lambda m: m.text == '–û—Ç–º–µ–Ω–∞')
def handle_cancel(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'"""
    state = get_state(message.chat.id)
    state.mode = None
    state.pending_correct_en = None
    bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=main_menu())


@bot.message_handler(content_types=['text'])
def handle_text(message: types.Message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    state = get_state(message.chat.id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if state.mode == 'quiz' and state.pending_correct_en:
        user_db_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
        is_correct = message.text.strip().lower() == state.pending_correct_en.lower()
        db.record_attempt(user_db_id, state.pending_correct_en, is_correct)
        
        if is_correct:
            bot.send_message(message.chat.id, '–í–µ—Ä–Ω–æ ‚úÖ')
            state.pending_correct_en = None
            ask_question(message)
        else:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚ùå')
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    if state.mode == 'add':
        parts = message.text.split('-')
        if len(parts) != 2:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <i>cat - –∫–æ—Ç</i>')
            return
        
        en = parts[0].strip()
        ru = parts[1].strip()
        user_db_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
        db.add_user_word(user_db_id, en, ru)
        
        count = len(db.get_training_pool(user_db_id))
        bot.send_message(
            message.chat.id,
            f'–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ –°–µ–π—á–∞—Å –≤ –≤–∞—à–µ–π –±–∞–∑–µ: <b>{count}</b> —Å–ª–æ–≤.',
            reply_markup=main_menu(),
        )
        state.mode = None
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    if state.mode == 'delete':
        en = message.text.strip()
        user_db_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
        deleted = db.delete_user_word(user_db_id, en)
        
        if deleted:
            bot.send_message(message.chat.id, '–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ', reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, '–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤.', reply_markup=main_menu())
        state.mode = None
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=main_menu())


if __name__ == '__main__':
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        from startup_utils import safe_startup_check
        from config import DB_URL
        
        logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≥–æ—Ç–æ–≤–∏–º —Å–∏—Å—Ç–µ–º—É –∫ –∑–∞–ø—É—Å–∫—É
        if not safe_startup_check(TELEGRAM_BOT_TOKEN, DB_URL):
            logger.error("‚ùå –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
            sys.exit(1)
        
        logger.info('‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!')
        logger.info('ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        bot.infinity_polling(skip_pending=True, timeout=10, long_polling_timeout=5)
        
    except KeyboardInterrupt:
        logger.info("‚èπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if "409" in str(e) or "Conflict" in str(e):
            print("\nüîß –û–®–ò–ë–ö–ê 409: –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Å –¥—Ä—É–≥–∏–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞")
            print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ")
            print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –±–æ—Ç —á–µ—Ä–µ–∑ @BotFather")
            print("3. –û–±–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ config.txt")
            
        elif "psycopg2" in str(e) or "database" in str(e).lower():
            print("\nüîß –û–®–ò–ë–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
            from startup_utils import print_postgresql_help
            print_postgresql_help()
            
        elif "connection" in str(e).lower():
            print("\nüîß –û–®–ò–ë–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("1. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            print("2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
            print("3. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API")
            
        sys.exit(1) 