import logging
from dataclasses import dataclass
from typing import Dict, Optional

import telebot
from telebot import types

from .config import TELEGRAM_BOT_TOKEN
from . import db
from .keyboards import main_menu, options_keyboard, cancel_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s %(message)s')
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, parse_mode='HTML')


@dataclass
class UserState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º"""
    mode: Optional[str] = None  # 'quiz' | 'add' | 'delete'
    pending_correct_en: Optional[str] = None


# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states: Dict[int, UserState] = {}


def get_state(chat_id: int) -> UserState:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if chat_id not in user_states:
        user_states[chat_id] = UserState()
    return user_states[chat_id]


@bot.message_handler(commands=['start'])
def handle_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω id=%s tg_id=%s", user_id, message.from_user.id)
    
    welcome = (
        "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï, —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n\n"
        "–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è"
    )
    bot.send_message(message.chat.id, welcome, reply_markup=main_menu())


@bot.message_handler(func=lambda m: m.text == '–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
def handle_start_training(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'"""
    state = get_state(message.chat.id)
    state.mode = 'quiz'
    ask_question(message)


def ask_question(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_db_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
    picked = db.pick_question_with_options(user_db_id)
    
    if not picked:
        bot.send_message(
            message.chat.id,
            '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë —Å–ª–æ–≤–∞ (–º–∏–Ω–∏–º—É–º 4 –≤ —Å—É–º–º–µ).',
            reply_markup=main_menu(),
        )
        return
    
    word_ru, correct_en, options = picked
    state = get_state(message.chat.id)
    state.pending_correct_en = correct_en
    
    bot.send_message(
        message.chat.id,
        f'–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: <b>{word_ru}</b>?',
        reply_markup=options_keyboard(options),
    )


@bot.message_handler(func=lambda m: m.text == '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï')
def handle_add_word(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'"""
    state = get_state(message.chat.id)
    state.mode = 'add'
    bot.send_message(
        message.chat.id,
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ - —Ä—É—Å—Å–∫–∏–π</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>cat - –∫–æ—Ç</i>)',
        reply_markup=cancel_keyboard(),
    )


@bot.message_handler(func=lambda m: m.text == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô')
def handle_delete_word(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ'"""
    state = get_state(message.chat.id)
    state.mode = 'delete'
    bot.send_message(
        message.chat.id,
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ</b> —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã',
        reply_markup=cancel_keyboard(),
    )


@bot.message_handler(func=lambda m: m.text == '–û—Ç–º–µ–Ω–∞')
def handle_cancel(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'"""
    state = get_state(message.chat.id)
    state.mode = None
    state.pending_correct_en = None
    bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=main_menu())


@bot.message_handler(content_types=['text'])
def handle_text(message: types.Message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    state = get_state(message.chat.id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if state.mode == 'quiz' and state.pending_correct_en:
        user_db_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
        is_correct = message.text.strip().lower() == state.pending_correct_en.lower()
        db.record_attempt(user_db_id, state.pending_correct_en, is_correct)
        
        if is_correct:
            bot.send_message(message.chat.id, '–í–µ—Ä–Ω–æ ‚úÖ')
            state.pending_correct_en = None
            ask_question(message)
        else:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚ùå')
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    if state.mode == 'add':
        parts = message.text.split('-')
        if len(parts) != 2:
            bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: <i>cat - –∫–æ—Ç</i>')
            return
        
        en = parts[0].strip()
        ru = parts[1].strip()
        user_db_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
        db.add_user_word(user_db_id, en, ru)
        
        count = len(db.get_training_pool(user_db_id))
        bot.send_message(
            message.chat.id,
            f'–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ –°–µ–π—á–∞—Å –≤ –≤–∞—à–µ–π –±–∞–∑–µ: <b>{count}</b> —Å–ª–æ–≤.',
            reply_markup=main_menu(),
        )
        state.mode = None
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    if state.mode == 'delete':
        en = message.text.strip()
        user_db_id = db.ensure_user(message.from_user.id, message.from_user.username, message.from_user.first_name)
        deleted = db.delete_user_word(user_db_id, en)
        
        if deleted:
            bot.send_message(message.chat.id, '–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ', reply_markup=main_menu())
        else:
            bot.send_message(message.chat.id, '–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤.', reply_markup=main_menu())
        state.mode = None
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=main_menu())


if __name__ == '__main__':
    logger.info('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...')
    bot.infinity_polling(skip_pending=True) 